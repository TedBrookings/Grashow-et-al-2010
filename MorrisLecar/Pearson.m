function varargout = Pearson(X, Y)
% [PearsonCoef, PVal] = Pearson(X, Y)
% Calculates the Pearson product-momentum correlation coefficient
%  INPUTS:
%   -X,Y:  1D arrays of equal length
%  OUTPUTS:
%   -PearsonCoef: value between -1 and 1, characterizing correlation
%   OPTIONAL
%    -PVal: probability PearsonCoef generated by uncorrelated
%           data.  If length(X) < 4, PVal will be NaN

if(nargin ~= 2 || nargout < 1 || nargout > 2)
  error('Usage: [PearsonCoef, PVal] = Pearson(X, Y)')
end
ErrStr = 'X and Y must be 1D arrays with equal length';
NumX = size(X, 1);
if(NumX == 1)
  X = X';
  NumX = size(X, 1);
elseif(NumX == 0 || size(X, 2) ~= 1)
  fprintf(2, 'Size of X = (%g, %g)\n', NumX, size(X, 2))
  error(ErrStr)
end
NumY = size(Y, 2);
if(NumY == 1)
  Y = Y';
  NumY = size(Y, 2);
elseif(NumY == 0 || size(Y, 1) ~= 1)
  fprintf(2, 'Size of Y = (%g, %g)\n', NumY, size(Y, 2))
  error(ErrStr)
end
if(NumY ~= NumX)
  error('X and Y must have equal length')
end

Ind = find(isfinite(Y') & isfinite(X));
NumX = length(Ind);
X = X(Ind);
Y = Y(Ind);
R = (zscore(Y) * zscore(X)) / (NumX - 1);
if(nargout == 1)
  varargout = {R};
  return
end
if(NumX < 4)
  P = NaN;
else
  if(R >= 1)
    Z = Inf;
    P = 0.0;
  elseif(R <= -1)
    Z = -Inf;
    P = 1.0;
  else
    Z = sqrt(NumX - 3) * atanh(R);
    P = 0.5 * erfc(Z / sqrt(2));
  end
end
varargout = {R, P};
return
